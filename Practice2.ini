import xml.etree.ElementTree as ET
import os
import sys
from urllib.parse import urlparse

CONFIG_FILE = "config.xml"

def load_config(path):
    if not os.path.exists(path):
        raise FileNotFoundError(f"Конфигурационный файл '{path}' не найден.")

    try:
        tree = ET.parse(path)
        root = tree.getroot()
    except ET.ParseError as e:
        raise ValueError(f"Ошибка разбора XML: {e}")

    config = {}
    for tag in ["package_name", "repository_url", "mode", "ascii_output", "max_depth"]:
        element = root.find(tag)
        if element is None or element.text is None:
            raise ValueError(f"Параметр '{tag}' отсутствует или пуст.")
        config[tag] = element.text.strip()
    return config


def validate_config(config):
    if not config["package_name"]:
        raise ValueError("Имя пакета не может быть пустым.")


    repo = config["repository_url"]
    if not (repo.startswith("http://") or repo.startswith("https://") or os.path.exists(repo)):
        raise ValueError(f"Некорректный путь или URL: {repo}")


    if config["mode"] not in ["local", "remote"]:
        raise ValueError("Параметр 'mode' должен быть 'local' или 'remote'.")

    if config["ascii_output"].lower() not in ["true", "false"]:
        raise ValueError("Параметр 'ascii_output' должен быть true/false.")

    try:
        depth = int(config["max_depth"])
        if depth <= 0:
            raise ValueError
    except ValueError:
        raise ValueError("Параметр 'max_depth' должен быть положительным целым числом.")


def main():
    print("=== Graph Dependency Visualizer ===")

    try:
        config = load_config(CONFIG_FILE)
        validate_config(config)
    except Exception as e:
        print(f"[Ошибка] {e}")
        sys.exit(1)

    print("\nПараметры конфигурации:")
    for key, value in config.items():
        print(f"{key}: {value}")

    print("\nПриложение завершило работу успешно.")

if __name__ == "__main__":
    main()
